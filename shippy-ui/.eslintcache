[{"/home/mikhail/GolandProjects/shippy/shippy-ui/src/index.js":"1","/home/mikhail/GolandProjects/shippy/shippy-ui/src/reportWebVitals.js":"2","/home/mikhail/GolandProjects/shippy/shippy-ui/src/App.js":"3","/home/mikhail/GolandProjects/shippy/shippy-ui/src/CreateConsignment.js":"4","/home/mikhail/GolandProjects/shippy/shippy-ui/src/Authenticate.js":"5"},{"size":509,"mtime":1607609047482,"results":"6","hashOfConfig":"7"},{"size":402,"mtime":1607609047426,"results":"8","hashOfConfig":"7"},{"size":1235,"mtime":1607609047442,"results":"9","hashOfConfig":"7"},{"size":3687,"mtime":1607609047498,"results":"10","hashOfConfig":"7"},{"size":4324,"mtime":1607609047514,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lyiv7v",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},"/home/mikhail/GolandProjects/shippy/shippy-ui/src/index.js",[],"/home/mikhail/GolandProjects/shippy/shippy-ui/src/reportWebVitals.js",[],["25","26"],"/home/mikhail/GolandProjects/shippy/shippy-ui/src/App.js",[],"/home/mikhail/GolandProjects/shippy/shippy-ui/src/CreateConsignment.js",["27"],"// shippy-ui/src/CreateConsignment.js\nimport React from 'react';\nimport _ from 'lodash';\n\nclass CreateConsignment extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    state = {\n        created: false,\n        description: '',\n        weight: 0,\n        containers: [],\n        consignments: [],\n    }\n\n    componentWillMount() {\n        fetch(`http://localhost:8080/rpc`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                service: 'shippy.consignment',\n                method: 'ConsignmentService.Get',\n                request: {},\n            })\n        })\n            .then(req => req.json())\n            .then((res) => {\n                this.setState({\n                    consignments: res.consignments,\n                });\n            });\n    }\n\n    create = () => {\n        const consignment = this.state;\n        fetch(`http://localhost:8080/rpc`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                service: 'shippy.consignment',\n                method: 'ConsignmentService.Create',\n                request: _.omit(consignment, 'created', 'consignments'),\n            }),\n        })\n            .then((res) => res.json())\n            .then((res) => {\n                this.setState({\n                    created: res.created,\n                    consignments: [...this.state.consignments, consignment],\n                });\n            });\n    }\n\n    addContainer = e => {\n        this.setState({\n            containers: [...this.state.containers, e.target.value],\n        });\n    }\n\n    setDescription = e => {\n        this.setState({\n            description: e.target.value,\n        });\n    }\n\n    setWeight = e => {\n        this.setState({\n            weight: Number(e.target.value),\n        });\n    }\n\n    render() {\n        const { consignments, } = this.state;\n        return (\n            <div className='consignment-screen'>\n                <div className='consignment-form container'>\n                    <br />\n                    <div className='form-group'>\n                        <textarea onChange={this.setDescription} className='form-control' placeholder='Description'></textarea>\n                    </div>\n                    <div className='form-group'>\n                        <input onChange={this.setWeight} type='number' placeholder='Weight' className='form-control' />\n                    </div>\n                    <div className='form-control'>\n                        Add containers...\n                    </div>\n                    <br />\n                    <button onClick={this.create} className='btn btn-primary'>Create</button>\n                    <br />\n                    <hr />\n                </div>\n                {(consignments && consignments.length > 0\n                    ? <div className='consignment-list'>\n                        <h2>Consignments</h2>\n                        {consignments.map((item) => (\n                            <div>\n                                <p>Vessel id: {item.vessel_id}</p>\n                                <p>Consignment id: {item.id}</p>\n                                <p>Description: {item.description}</p>\n                                <p>Weight: {item.weight}</p>\n                                <hr />\n                            </div>\n                        ))}\n                    </div>\n                    : false)}\n            </div>\n        );\n    }\n}\n\nexport default CreateConsignment;","/home/mikhail/GolandProjects/shippy/shippy-ui/src/Authenticate.js",["28"],"// shippy-ui/src/Authenticate.js\nimport React from 'react';\n\nclass Authenticate extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    state = {\n        authenticated: false,\n        email: '',\n        password: '',\n        err: '',\n    }\n\n    login = () => {\n        fetch(`http://localhost:8080/rpc`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                request: {\n                    email: this.state.email,\n                    password: this.state.password,\n                },\n                service: 'shippy.auth',\n                method: 'Auth.Auth',\n            }),\n        })\n            .then(res => res.json())\n            .then(res => {\n                this.props.onAuth(res.token);\n                this.setState({\n                    token: res.token,\n                    authenticated: true,\n                });\n            })\n            .catch(err => this.setState({ err, authenticated: false, }));\n    }\n\n    signup = () => {\n        fetch(`http://localhost:8080/rpc`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                request: {\n                    email: this.state.email,\n                    password: this.state.password,\n                    name: this.state.name,\n                },\n                method: 'Auth.Create',\n                service: 'shippy.auth',\n            }),\n        })\n            .then((res) => res.json())\n            .then((res) => {\n                this.props.onAuth(res.token.token);\n                this.setState({\n                    token: res.token.token,\n                    authenticated: true,\n                });\n                localStorage.setItem('token', res.token.token);\n            })\n            .catch(err => this.setState({ err, authenticated: false, }));\n    }\n\n    setEmail = e => {\n        this.setState({\n            email: e.target.value,\n        });\n    }\n\n    setPassword = e => {\n        this.setState({\n            password: e.target.value,\n        });\n    }\n\n    setName = e => {\n        this.setState({\n            name: e.target.value,\n        });\n    }\n\n    render() {\n        return (\n            <div className='Authenticate'>\n                <div className='Login'>\n                    <div className='form-group'>\n                        <input\n                            type=\"email\"\n                            onChange={this.setEmail}\n                            placeholder='E-Mail'\n                            className='form-control' />\n                    </div>\n                    <div className='form-group'>\n                        <input\n                            type=\"password\"\n                            onChange={this.setPassword}\n                            placeholder='Password'\n                            className='form-control' />\n                    </div>\n                    <button className='btn btn-primary' onClick={this.login}>Login</button>\n                    <br /><br />\n                </div>\n                <div className='Sign-up'>\n                    <div className='form-group'>\n                        <input\n                            type='input'\n                            onChange={this.setName}\n                            placeholder='Name'\n                            className='form-control' />\n                    </div>\n                    <div className='form-group'>\n                        <input\n                            type='email'\n                            onChange={this.setEmail}\n                            placeholder='E-Mail'\n                            className='form-control' />\n                    </div>\n                    <div className='form-group'>\n                        <input\n                            type='password'\n                            onChange={this.setPassword}\n                            placeholder='Password'\n                            className='form-control' />\n                    </div>\n                    <button className='btn btn-primary' onClick={this.signup}>Sign-up</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Authenticate;",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":7,"column":5,"nodeType":"35","messageId":"36","endLine":9,"endColumn":6},{"ruleId":"33","severity":1,"message":"34","line":6,"column":5,"nodeType":"35","messageId":"36","endLine":8,"endColumn":6},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]